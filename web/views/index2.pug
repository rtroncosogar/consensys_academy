doctype html
html(lang='en')
  head
    title #{title}  
    
  body
    h1 #{title}
    button(onclick="loginDonor()") Login as Donor
    button(onclick="loginRequestor()") Login as Requestor

    script(src='assets/js/jquery.min.js')
    script(src='assets/js/popper.min.js')
    script(src='assets/js/bootstrap.min.js')
    script(src='assets/js/slick.min.js')
    script(src='assets/js/jquery.mb.YTPlayer.min.js')
    script(src='assets/js/jquery.waypoints.min.js')
    script(src='assets/js/jquery.easing.1.3.js')
    script(src='assets/js/main.js')
    script(src='bundle.js')
    script(type='text/javascript').

        window.addEventListener('load', function() {
            

            // Checking if Web3 has been injected by the browser (Mist/MetaMask)
            if (typeof web3 !== 'undefined') {

                // Use the browser's ethereum provider
                var provider = web3.currentProvider
                window.eth = new Eth(web3.currentProvider);
                console.log("Detected a web3 provider");

            } else {
                console.log('No web3? You should consider trying MetaMask!')
            }

        })

        function loginDonor() {
            let challenge = null;
            
            window.eth.accounts((accountsError, accounts) => {
                $.get('http://www.clpt.cl/auth/' + accounts[0] + "?type=donor", (res) =>   {
                challenge = res;
                console.log("#############");
                console.log(res);
                console.log("#############");

                const from = accounts[0];
                const params = [challenge, from];
                const method = 'eth_signTypedData';
                web3.currentProvider.sendAsync({
                    method,
                    params,
                    from
                }, async (err, result) => {
                    signature = result.result;
                    if (err) {
                        return console.error(err);
                    }
                    $.get('http://www.clpt.cl/auth/' + challenge[1].value + '/' + signature, (res) => {
                        if (res === web3.eth.accounts[0]) {
                            //alert("Successfully logged in");
                            window.location.href = "/home?auth=" + challenge[1].value + "&&account=" + accounts[0];
                        } else {
                            //alert("Failed to login");
                        }
                    });
                if (result.error) {
                    return console.error(result.error);
                }
                });
            });
            });
        };

        function loginRequestor() {
            let challenge = null;
            
            window.eth.accounts((accountsError, accounts) => {
                $.get('http://www.clpt.cl/auth/' + accounts[0] + "?type=requestor", (res) =>   {
                challenge = res;
                console.log("#############");
                console.log(res);
                console.log("#############");

                const from = accounts[0];
                const params = [challenge, from];
                const method = 'eth_signTypedData';
                web3.currentProvider.sendAsync({
                    method,
                    params,
                    from
                }, async (err, result) => {
                    signature = result.result;
                    if (err) {
                        return console.error(err);
                    }
                    $.get('http://www.clpt.cl/auth/' + challenge[1].value + '/' + signature, (res) => {
                        if (res === web3.eth.accounts[0]) {
                            //alert("Successfully logged in");
                            window.location.href = "/home?auth=" + challenge[1].value + "&&account=" + accounts[0];
                        } else {
                            //alert("Failed to login");
                        }
                    });
                if (result.error) {
                    return console.error(result.error);
                }
                });
            });
            });
        }
